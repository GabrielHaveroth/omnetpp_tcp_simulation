[General]
network = Network_two_clients

warnings = true
sim-time-limit = 200.0s
**.vector-recording = true

#
# Network specific settings
#

# ip settings
**.forwarding = false

# hookType settings
# Arp settings
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s

# NIC settings
**.ppp[*].ppp.queue.typename = "DropTailQueue"
**.ppp[*].ppp.queue.packetCapacity = 50    # packets

# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp

# tcp apps - client
**.client.numApps = 1
**.client.app[*].typename = "TcpSessionApp"  
**.client.app[*].sendBytes = 100MiB
**.client.app[*].active = true
**.client.app[*].connectAddress = "server"
**.client.app[0].connectPort = 80
**.client.app[*].tOpen = 0s
**.client.app[*].tSend = 0s
**.client.app[*].tClose = 0s
**.client.app[*].sendScript = ""

# tcp apps - client
**.other_client.numApps = 1
**.other_client.app[*].typename = "TcpSessionApp"   
**.other_client.app[*].sendBytes = 100MiB
**.other_client.app[*].active = true
**.other_client.app[*].connectAddress = "server"
**.other_client.app[0].connectPort = 8080
**.other_client.app[*].tOpen = 0s
**.other_client.app[*].tSend = 0s
**.other_client.app[*].tClose = 0s
**.other_client.app[*].sendScript = ""

# tcp apps - server
**.server.numApps = 2
**.server.app[*].typename = "TcpSinkApp"
**.server.app[0].localPort = 80
**.server.app[1].localPort = 8080


# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp

[Config WS_disabled]
description = "Window_Scale_disabled_2_clients"
**.tcp.windowScalingSupport = false
**.tcp.advertisedWindow = 65535

[Config WS_enabled]
description = "Window_Scale_enabled_2_clients"
**.tcp.windowScalingSupport = true
**.tcp.advertisedWindow = 65535*100

[Config WS_disabled_one_client]
network = Network_one_client
description = "Window_Scale_disabled_1_client"
**.tcp.windowScalingSupport = false
**.tcp.advertisedWindow = 65535

[Config WS_enabled_one_client]
network = Network_one_client
description = "Window_Scale_enabled_1_client"
**.tcp.windowScalingSupport = true
**.tcp.advertisedWindow = 65535*100

[Config two_clients_three_conections_fairness]
extends = WS_enabled
**.other_client.numApps = 2
**.other_client.app[0].connectPort = 8080
**.other_client.app[1].connectPort = 5000
**.server.numApps = 3
**.server.app[0].localPort = 80
**.server.app[1].localPort = 8080
**.server.app[2].localPort = 5000

[Config two_clients_four_conections_fairness]
extends = WS_enabled
**.other_client.numApps = 3
**.other_client.app[0].connectPort = 8080
**.other_client.app[1].connectPort = 5000
**.other_client.app[2].connectPort = 5001
*.server.numApps = 4
**.server.app[0].localPort = 80
**.server.app[1].localPort = 8080
**.server.app[2].localPort = 5000
**.server.app[3].localPort = 5001






